spring:
  profiles.active: dev
  mail:
    host: ${MAIL_SENDER_HOST}
    port: ${MAIL_SENDER_PORT}
    username: ${MAIL_SENDER_USERNAME}
    password: ${MAIL_SENDER_PASSWORD}
    properties.mail.smtp.auth: true
    properties.mail.smtp.starttls.enable: true
  mustache:
    suffix: .html
    cache: true
  servlet:
    multipart:
      max-file-size: 2000MB
      max-request-size: 2000MB
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml
    contexts: none
    default-schema: public
server:
  port: 8088
  tomcat:
    max-http-form-post-size: 2000MB
logging:
  level:
    org.springframework.web: INFO
#logging.level.org.springframework.security: TRACE
---
# Run a docker container with docker run -d --name some-postgres -e POSTGRES_PASSWORD=password -p 5432:5432 postgres:13.4
# Then you can use JPABuddy to update the schema
spring:
  config:
    activate:
      on-profile: liquibaseUpdate
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: password
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  #    hibernate:
  #      ddl-auto: update
  liquibase:
    #    enabled: false
    contexts: dev

---

spring:
  config:
    activate:
      on-profile: integrationTest
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  liquibase:
    contexts: test
logging:
  level:
    org:
      liquibase: DEBUG
---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:h2:mem:datarecovery
    driverClassName: org.h2.Driver
    username: sa
    password: password
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    properties:
      hibernate.format_sql: true
  liquibase:
    contexts: dev
---
spring:
  config:
    activate:
      on-profile: local-staging
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: ${POSTGRES_PASSWORD}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
  liquibase:
    contexts: prod


---
spring:
  config:
    activate:
      on-profile: production
  datasource:
    url: jdbc:postgresql://db:5432/postgres
    username: postgres
    password: ${POSTGRES_PASSWORD}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
  liquibase:
    contexts: prod

---
stages: # List of stages for jobs, and their order of execution
  - archive
image:
  alpine:3.15.0

variables:
  GIT_SSL_NO_VERIFY: "true"
  ZIP_NAME: $CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA.zip

archive-repo: # This job runs in the build stage, which runs first.
  stage: archive
  #  rules:
  #    - if: $CI_COMMIT_TAG
  script:
    - apk add zip
    - apk add curl
    - apk add jq
    - |
      metadata=$(jq '. +={"commitsha": '\"${CI_COMMIT_SHA}\"',"projectname":'\"${CI_PROJECT_NAME}\"'}' application.json5)
    - echo ${metadata}
    - zip ${ZIP_NAME} ./*
    - ls
    - curl --insecure --location --request POST 'https://platform-marketplace-service.integration.usu.k8s.aspera.usu.grp/main/api/upload' --form 'repoDir=@'"./${ZIP_NAME}" --form 'metadata='"${metadata}"
